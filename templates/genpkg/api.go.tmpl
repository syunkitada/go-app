package genpkg
{{- $spec := . }}

import (
	"encoding/json"

	"github.com/jinzhu/gorm"

	"github.com/syunkitada/goapp/pkg/authproxy/config"
	"github.com/syunkitada/goapp/pkg/authproxy/db_api"
	"github.com/syunkitada/goapp/pkg/base/base_config"
	"github.com/syunkitada/goapp/pkg/base/base_const"
	"github.com/syunkitada/goapp/pkg/base/base_model"
	"github.com/syunkitada/goapp/pkg/lib/logger"
    {{- range $api := $spec.Apis }}
    {{- range $query := $api.Queries }}
    "{{ $query.PkgPath }}"
    {{- end }}
    {{- end }}
)

type QueryResolver interface {
    {{- range $api := $spec.Apis }}
    {{- range $query := $api.Queries }}
    {{ $query.Name }}(tctx *logger.TraceContext, db *gorm.DB, input *{{ $query.PkgName }}.{{ $query.Name }}) (*{{ $query.PkgName }}.{{ $query.Name }}Data, uint8, error)
    {{- end }}
    {{- end }}
}

type QueryHandler struct {
	resolver QueryResolver
	dbApi    *db_api.Api
}

func NewQueryHandler(baseConf *base_config.Config, mainConf *config.Config, resolver QueryResolver) *QueryHandler {
	return &QueryHandler{
		resolver: resolver,
		dbApi:    db_api.New(baseConf, mainConf),
	}
}

func (handler *QueryHandler) Exec(tctx *logger.TraceContext, req *base_model.Request, rep *base_model.Reply) error {
	var err error
	for _, query := range req.Queries {
		switch query.Name {
        {{- range $api := $spec.Apis }}
        {{- range $query := $api.Queries }}
        case "{{ $query.Name }}":
			var input {{ $query.PkgName }}.{{ $query.Name }}
			err = json.Unmarshal([]byte(query.Data), &input)
			if err != nil {
				return err
			}

			var db *gorm.DB
			if db, err = handler.dbApi.Open(tctx); err != nil {
				return err
			}
			defer handler.dbApi.Close(tctx, db)

            data, code, err := handler.resolver.{{ $query.Name }}(tctx, db, &input)
            if err != nil {
                if code == 0 {
                    code = base_const.CodeServerInternalError
                }
                rep.Error = err.Error()
            }
            rep.Code = code
			rep.Data["{{ $query.Name }}"] = data
			return err
        {{- end }}
        {{- end }}
		}
	}
	return nil
}
