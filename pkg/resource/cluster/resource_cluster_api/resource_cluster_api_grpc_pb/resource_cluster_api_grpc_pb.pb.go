// Code generated by protoc-gen-go. DO NOT EDIT.
// source: resource/cluster/resource_cluster_api/resource_cluster_api_grpc_pb/resource_cluster_api_grpc_pb.proto

package resource_cluster_api_grpc_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	authproxy_grpc_pb "github.com/syunkitada/goapp/pkg/authproxy/authproxy_grpc_pb"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("resource/cluster/resource_cluster_api/resource_cluster_api_grpc_pb/resource_cluster_api_grpc_pb.proto", fileDescriptor_c7fc55d762109246)
}

var fileDescriptor_c7fc55d762109246 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0x31, 0x4e, 0x03, 0x31,
	0x10, 0x45, 0x49, 0x93, 0xc2, 0x0d, 0x92, 0xcb, 0x80, 0x10, 0xe2, 0x00, 0xb6, 0x44, 0x4e, 0x90,
	0x50, 0xd0, 0x50, 0x44, 0x5b, 0xd2, 0x58, 0xb6, 0x33, 0x72, 0xac, 0x6c, 0x32, 0x83, 0x3d, 0x23,
	0x65, 0xef, 0xc1, 0x81, 0x91, 0xd9, 0x90, 0x26, 0x68, 0x9b, 0x74, 0x5f, 0xef, 0x8f, 0x9f, 0xac,
	0xaf, 0xa0, 0x40, 0x45, 0x29, 0x11, 0x6c, 0xec, 0xa5, 0x32, 0x14, 0xfb, 0x07, 0xdc, 0x19, 0x38,
	0x4f, 0xf9, 0x5f, 0xe8, 0x52, 0xa1, 0xe8, 0x28, 0x4c, 0x96, 0x86, 0x0a, 0x32, 0xea, 0xc7, 0xa9,
	0x9b, 0xc5, 0xd2, 0x0b, 0xef, 0xa8, 0xe0, 0x69, 0xb0, 0x97, 0x74, 0xb1, 0x5f, 0x91, 0x51, 0xf9,
	0x1a, 0x94, 0xee, 0xce, 0xd2, 0xb7, 0xd1, 0xb9, 0xa2, 0xac, 0x3f, 0xd4, 0x7c, 0x15, 0x39, 0xe3,
	0x51, 0x3f, 0x9b, 0xeb, 0x97, 0x63, 0xd5, 0xc1, 0x97, 0x40, 0xe5, 0xc5, 0xd3, 0xc4, 0x05, 0xf5,
	0xc3, 0xcb, 0xdd, 0xfa, 0x7b, 0xa6, 0x1e, 0x32, 0x9a, 0x56, 0x1a, 0x38, 0xf9, 0x03, 0xf5, 0x50,
	0x4d, 0x41, 0x61, 0x48, 0x92, 0xb7, 0xb0, 0xbe, 0xef, 0x5a, 0x7e, 0x6f, 0x79, 0xd3, 0x3e, 0xb5,
	0x99, 0x7d, 0x86, 0x94, 0x79, 0x27, 0xc1, 0x44, 0x3c, 0xd8, 0x3a, 0xc8, 0x71, 0x9f, 0xd9, 0x6f,
	0xbd, 0x4d, 0xe8, 0x89, 0x2c, 0xed, 0x93, 0xbd, 0x7d, 0xf0, 0x30, 0xff, 0x5d, 0x60, 0xf9, 0x13,
	0x00, 0x00, 0xff, 0xff, 0xf9, 0xaa, 0xab, 0x9c, 0xbd, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ResourceClusterApiClient is the client API for ResourceClusterApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceClusterApiClient interface {
	Action(ctx context.Context, in *authproxy_grpc_pb.ActionRequest, opts ...grpc.CallOption) (*authproxy_grpc_pb.ActionReply, error)
}

type resourceClusterApiClient struct {
	cc *grpc.ClientConn
}

func NewResourceClusterApiClient(cc *grpc.ClientConn) ResourceClusterApiClient {
	return &resourceClusterApiClient{cc}
}

func (c *resourceClusterApiClient) Action(ctx context.Context, in *authproxy_grpc_pb.ActionRequest, opts ...grpc.CallOption) (*authproxy_grpc_pb.ActionReply, error) {
	out := new(authproxy_grpc_pb.ActionReply)
	err := c.cc.Invoke(ctx, "/resource_cluster_api_grpc_pb.ResourceClusterApi/Action", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceClusterApiServer is the server API for ResourceClusterApi service.
type ResourceClusterApiServer interface {
	Action(context.Context, *authproxy_grpc_pb.ActionRequest) (*authproxy_grpc_pb.ActionReply, error)
}

func RegisterResourceClusterApiServer(s *grpc.Server, srv ResourceClusterApiServer) {
	s.RegisterService(&_ResourceClusterApi_serviceDesc, srv)
}

func _ResourceClusterApi_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(authproxy_grpc_pb.ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceClusterApiServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource_cluster_api_grpc_pb.ResourceClusterApi/Action",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceClusterApiServer).Action(ctx, req.(*authproxy_grpc_pb.ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceClusterApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resource_cluster_api_grpc_pb.ResourceClusterApi",
	HandlerType: (*ResourceClusterApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Action",
			Handler:    _ResourceClusterApi_Action_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource/cluster/resource_cluster_api/resource_cluster_api_grpc_pb/resource_cluster_api_grpc_pb.proto",
}
