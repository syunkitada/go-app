// Code generated by protoc-gen-go. DO NOT EDIT.
// source: resource_region_grpc_pb.proto

package resource_region_grpc_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HealthRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthRequest) Reset()         { *m = HealthRequest{} }
func (m *HealthRequest) String() string { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()    {}
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_resource_region_grpc_pb_a536f1b1c1abcda8, []int{0}
}
func (m *HealthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthRequest.Unmarshal(m, b)
}
func (m *HealthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthRequest.Marshal(b, m, deterministic)
}
func (dst *HealthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthRequest.Merge(dst, src)
}
func (m *HealthRequest) XXX_Size() int {
	return xxx_messageInfo_HealthRequest.Size(m)
}
func (m *HealthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthRequest proto.InternalMessageInfo

type HealthReply struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthReply) Reset()         { *m = HealthReply{} }
func (m *HealthReply) String() string { return proto.CompactTextString(m) }
func (*HealthReply) ProtoMessage()    {}
func (*HealthReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_resource_region_grpc_pb_a536f1b1c1abcda8, []int{1}
}
func (m *HealthReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthReply.Unmarshal(m, b)
}
func (m *HealthReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthReply.Marshal(b, m, deterministic)
}
func (dst *HealthReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthReply.Merge(dst, src)
}
func (m *HealthReply) XXX_Size() int {
	return xxx_messageInfo_HealthReply.Size(m)
}
func (m *HealthReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthReply.DiscardUnknown(m)
}

var xxx_messageInfo_HealthReply proto.InternalMessageInfo

func (m *HealthReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *HealthReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*HealthRequest)(nil), "resource_region_grpc_pb.HealthRequest")
	proto.RegisterType((*HealthReply)(nil), "resource_region_grpc_pb.HealthReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ResourceRegionClient is the client API for ResourceRegion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceRegionClient interface {
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthReply, error)
}

type resourceRegionClient struct {
	cc *grpc.ClientConn
}

func NewResourceRegionClient(cc *grpc.ClientConn) ResourceRegionClient {
	return &resourceRegionClient{cc}
}

func (c *resourceRegionClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthReply, error) {
	out := new(HealthReply)
	err := c.cc.Invoke(ctx, "/resource_region_grpc_pb.ResourceRegion/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceRegionServer is the server API for ResourceRegion service.
type ResourceRegionServer interface {
	Health(context.Context, *HealthRequest) (*HealthReply, error)
}

func RegisterResourceRegionServer(s *grpc.Server, srv ResourceRegionServer) {
	s.RegisterService(&_ResourceRegion_serviceDesc, srv)
}

func _ResourceRegion_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRegionServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource_region_grpc_pb.ResourceRegion/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRegionServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceRegion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resource_region_grpc_pb.ResourceRegion",
	HandlerType: (*ResourceRegionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _ResourceRegion_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource_region_grpc_pb.proto",
}

func init() {
	proto.RegisterFile("resource_region_grpc_pb.proto", fileDescriptor_resource_region_grpc_pb_a536f1b1c1abcda8)
}

var fileDescriptor_resource_region_grpc_pb_a536f1b1c1abcda8 = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x4a, 0x2d, 0xce,
	0x2f, 0x2d, 0x4a, 0x4e, 0x8d, 0x2f, 0x4a, 0x4d, 0xcf, 0xcc, 0xcf, 0x8b, 0x4f, 0x2f, 0x2a, 0x48,
	0x8e, 0x2f, 0x48, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xc7, 0x21, 0xad, 0xc4, 0xcf,
	0xc5, 0xeb, 0x91, 0x9a, 0x98, 0x53, 0x92, 0x11, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0xa2, 0x64,
	0xc8, 0xc5, 0x0d, 0x13, 0x28, 0xc8, 0xa9, 0x14, 0x12, 0xe0, 0x62, 0xce, 0x2d, 0x4e, 0x97, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x41, 0x22, 0xa9, 0x45, 0x45, 0x12, 0x4c, 0x10, 0x91,
	0xd4, 0xa2, 0x22, 0xa3, 0x2c, 0x2e, 0xbe, 0x20, 0xa8, 0xf1, 0x41, 0x60, 0xd3, 0x85, 0x22, 0xb8,
	0xd8, 0x20, 0x86, 0x08, 0xa9, 0xe9, 0xe1, 0x72, 0x18, 0x8a, 0xb5, 0x52, 0x2a, 0x04, 0xd5, 0x15,
	0xe4, 0x54, 0x2a, 0x31, 0x38, 0x19, 0x70, 0x49, 0x67, 0xe6, 0xeb, 0x81, 0xe4, 0xf4, 0x52, 0x2b,
	0x12, 0x73, 0x0b, 0x72, 0x52, 0x8b, 0xf5, 0x8a, 0xf2, 0x4b, 0x4b, 0x52, 0xd3, 0x4b, 0x33, 0x53,
	0x52, 0x9d, 0xf8, 0x83, 0x40, 0x6c, 0x77, 0x10, 0x3b, 0x00, 0xe4, 0xf1, 0x00, 0xc6, 0x24, 0x36,
	0x70, 0x08, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x99, 0x05, 0x6d, 0x8c, 0x22, 0x01, 0x00,
	0x00,
}
