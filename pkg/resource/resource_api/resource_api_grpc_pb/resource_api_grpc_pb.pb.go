// Code generated by protoc-gen-go. DO NOT EDIT.
// source: resource/resource_api/resource_api_grpc_pb/resource_api_grpc_pb.proto

package resource_api_grpc_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	authproxy_grpc_pb "github.com/syunkitada/goapp/pkg/authproxy/authproxy_grpc_pb"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("resource/resource_api/resource_api_grpc_pb/resource_api_grpc_pb.proto", fileDescriptor_623efaf0f1c5f7ad)
}

var fileDescriptor_623efaf0f1c5f7ad = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x2d, 0x4a, 0x2d, 0xce,
	0x2f, 0x2d, 0x4a, 0x4e, 0xd5, 0x87, 0x31, 0xe2, 0x13, 0x0b, 0x32, 0x51, 0x38, 0xf1, 0xe9, 0x45,
	0x05, 0xc9, 0xf1, 0x05, 0x49, 0x58, 0x05, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x44, 0xb0,
	0xc9, 0x49, 0x19, 0x27, 0x96, 0x96, 0x64, 0x14, 0x14, 0xe5, 0x57, 0x54, 0xea, 0xc3, 0x59, 0x70,
	0xd3, 0x30, 0x44, 0x20, 0x46, 0x19, 0xed, 0x60, 0xe4, 0xe2, 0x0e, 0x82, 0x9a, 0xe6, 0x58, 0x90,
	0x29, 0x14, 0xc2, 0xc5, 0x17, 0x90, 0x51, 0x59, 0x9c, 0x99, 0x9c, 0x98, 0xe3, 0x98, 0x5c, 0x92,
	0x99, 0x9f, 0x27, 0xa4, 0xa0, 0x87, 0xa9, 0x17, 0x22, 0x15, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c,
	0x22, 0x25, 0x87, 0x47, 0x45, 0x41, 0x4e, 0xa5, 0x12, 0x83, 0x50, 0x30, 0x17, 0x6f, 0x58, 0x66,
	0x51, 0x49, 0x29, 0x35, 0x0d, 0x75, 0xaa, 0xe1, 0x92, 0xce, 0xcc, 0xd7, 0x03, 0xc9, 0xe9, 0xa5,
	0x56, 0x24, 0xe6, 0x16, 0xe4, 0xa4, 0x16, 0xeb, 0x15, 0xe5, 0x97, 0x96, 0xa4, 0xa6, 0x97, 0x66,
	0xa6, 0xa4, 0x3a, 0xf1, 0x07, 0x81, 0xd8, 0xee, 0x20, 0x76, 0x00, 0xc8, 0xab, 0x01, 0x8c, 0x51,
	0x5e, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xc5, 0x95, 0xa5, 0x79,
	0xd9, 0x99, 0x25, 0x89, 0x29, 0x89, 0xfa, 0xe9, 0xf9, 0x89, 0x05, 0x05, 0xfa, 0x05, 0xd9, 0xe9,
	0xfa, 0xc4, 0x47, 0x4f, 0x12, 0x1b, 0x38, 0xfc, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x68,
	0xc0, 0x4e, 0x1f, 0xd3, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ResourceApiClient is the client API for ResourceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceApiClient interface {
	PhysicalAction(ctx context.Context, in *authproxy_grpc_pb.ActionRequest, opts ...grpc.CallOption) (*authproxy_grpc_pb.ActionReply, error)
	VirtualAction(ctx context.Context, in *authproxy_grpc_pb.ActionRequest, opts ...grpc.CallOption) (*authproxy_grpc_pb.ActionReply, error)
}

type resourceApiClient struct {
	cc *grpc.ClientConn
}

func NewResourceApiClient(cc *grpc.ClientConn) ResourceApiClient {
	return &resourceApiClient{cc}
}

func (c *resourceApiClient) PhysicalAction(ctx context.Context, in *authproxy_grpc_pb.ActionRequest, opts ...grpc.CallOption) (*authproxy_grpc_pb.ActionReply, error) {
	out := new(authproxy_grpc_pb.ActionReply)
	err := c.cc.Invoke(ctx, "/resource_api_grpc_pb.ResourceApi/PhysicalAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceApiClient) VirtualAction(ctx context.Context, in *authproxy_grpc_pb.ActionRequest, opts ...grpc.CallOption) (*authproxy_grpc_pb.ActionReply, error) {
	out := new(authproxy_grpc_pb.ActionReply)
	err := c.cc.Invoke(ctx, "/resource_api_grpc_pb.ResourceApi/VirtualAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceApiServer is the server API for ResourceApi service.
type ResourceApiServer interface {
	PhysicalAction(context.Context, *authproxy_grpc_pb.ActionRequest) (*authproxy_grpc_pb.ActionReply, error)
	VirtualAction(context.Context, *authproxy_grpc_pb.ActionRequest) (*authproxy_grpc_pb.ActionReply, error)
}

func RegisterResourceApiServer(s *grpc.Server, srv ResourceApiServer) {
	s.RegisterService(&_ResourceApi_serviceDesc, srv)
}

func _ResourceApi_PhysicalAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(authproxy_grpc_pb.ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceApiServer).PhysicalAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource_api_grpc_pb.ResourceApi/PhysicalAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceApiServer).PhysicalAction(ctx, req.(*authproxy_grpc_pb.ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceApi_VirtualAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(authproxy_grpc_pb.ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceApiServer).VirtualAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource_api_grpc_pb.ResourceApi/VirtualAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceApiServer).VirtualAction(ctx, req.(*authproxy_grpc_pb.ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resource_api_grpc_pb.ResourceApi",
	HandlerType: (*ResourceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PhysicalAction",
			Handler:    _ResourceApi_PhysicalAction_Handler,
		},
		{
			MethodName: "VirtualAction",
			Handler:    _ResourceApi_VirtualAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource/resource_api/resource_api_grpc_pb/resource_api_grpc_pb.proto",
}
